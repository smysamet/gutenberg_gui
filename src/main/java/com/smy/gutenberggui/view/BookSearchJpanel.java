package com.smy.gutenberggui.view;

import com.gargoylesoftware.htmlunit.WebClient;
import com.gargoylesoftware.htmlunit.html.HtmlPage;
import com.gargoylesoftware.htmlunit.html.HtmlParagraph;
import com.gargoylesoftware.htmlunit.html.HtmlTable;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author sam
 */
public class BookSearchJpanel extends javax.swing.JPanel {

    private MainFrame mainFrame;

    /**
     * Creates new form BookSearchJpanel
     */
    public BookSearchJpanel(MainFrame mainFrame) {
        initComponents();
        this.mainFrame = mainFrame;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        kitapAraTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        kitapAramaComboBox = new javax.swing.JComboBox<>();
        kitapAraButton = new javax.swing.JButton();

        setMaximumSize(new java.awt.Dimension(650, 630));
        setMinimumSize(new java.awt.Dimension(650, 630));
        setPreferredSize(new java.awt.Dimension(650, 630));

        kitapAraTextField.setBackground(new java.awt.Color(212, 212, 212));
        kitapAraTextField.setForeground(new java.awt.Color(60, 63, 65));

        jLabel2.setText("Kitap Ara:");

        kitapAramaComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Kitap Adı", "Yazar" }));
        kitapAramaComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kitapAramaComboBoxActionPerformed(evt);
            }
        });

        kitapAraButton.setText("Ara");
        kitapAraButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kitapAraButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(kitapAraTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 447, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(104, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(kitapAraButton)
                    .addComponent(kitapAramaComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(112, 112, 112))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(kitapAraTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(kitapAramaComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(kitapAraButton)
                .addContainerGap(338, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    private void kitapAraButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kitapAraButtonActionPerformed

        if (kitapAraTextField.getText().trim().equals("")) {
            return;
        }

        if (kitapAramaComboBox.getSelectedItem().equals("Kitap Adı")) {
            try {
                List<Object> resultList = submittingForm(null, kitapAraTextField.getText());
                this.mainFrame.getBookResultsJpanel().setTableData(resultList);
                // table olan jframe'i gösteriyor
                this.mainFrame.getCardLayout().show(this.mainFrame.getMainPanel(), "bookResultsJpanel");
            } catch (Exception ex) {
                Logger.getLogger(BookSearchJpanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        if (kitapAramaComboBox.getSelectedItem().equals("Yazar")) {
            try {
                List<Object> resultList = submittingForm(kitapAraTextField.getText(), null);
                this.mainFrame.getBookResultsJpanel().setTableData(resultList);
                // table olan jframe'i gösteriyor
                this.mainFrame.getCardLayout().show(this.mainFrame.getMainPanel(), "bookResultsJpanel");
            } catch (Exception ex) {
                Logger.getLogger(BookSearchJpanel.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_kitapAraButtonActionPerformed

    private void kitapAramaComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kitapAramaComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_kitapAramaComboBoxActionPerformed

    private static List<Object> submittingForm(String yazarAdi, String kitapAdi) throws Exception {
        try (final WebClient webClient = new WebClient()) {

            String innerYazar = "";
            String innerKitap = "";

            if (yazarAdi != null) {
                innerYazar = yazarAdi;
            }

            if (kitapAdi != null) {
                innerKitap = kitapAdi;
            }

            webClient.getOptions().setThrowExceptionOnScriptError(false);

            List<Object> tableContents = new ArrayList<>();

            // ilk sayfayı al
            final HtmlPage page1 = webClient.getPage("https://www.gutenberg.org/ebooks/results/?"
                    + "author=" + innerYazar + "&"
                    + "title=" + innerKitap + "&"
                    + "subject=&"
                    + "lang=&"
                    + "category=&"
                    + "locc=&"
                    + "filetype=&"
                    + "submit_search=Search");

            // eğer result tek sayfa ise
            if (page1.getByXPath("/html/body/div[1]/div[2]/p[3]").isEmpty()) {
                HtmlTable htmlTable = (HtmlTable) page1.getByXPath("/html/body/div[1]/div[2]/table").get(0);
                // tablodaki tüm rowlardan veriyi çekiyoruz
                for (int j = 1; j < htmlTable.getRowCount(); j++) {
                    // add etext-no
                    tableContents.add(Integer.parseInt(htmlTable.getRow(j).getCell(0).getTextContent()));

                    // add author
                    tableContents.add(htmlTable.getRow(j).getCell(2).getTextContent());

                    // add title
                    tableContents.add(htmlTable.getRow(j).getCell(3).getTextContent());

                    //add language
                    tableContents.add(htmlTable.getRow(j).getCell(4).getTextContent());
                }
            // eğer result birden fazla sayfa ise
            } else {
                // döngüyle gezebilmek için sayfa sayısını al
                int sonucSayfaSayisi = ((HtmlParagraph) page1.getByXPath("/html/body/div[1]/div[2]/p[3]")
                        .get(0)).getChildElementCount() - 1;
                // sonuçlardaki bütün sayfaları gez
                for (int i = 1; i <= sonucSayfaSayisi; i++) {

                    HtmlPage tempPage = webClient.getPage("https://www.gutenberg.org/ebooks/results/?"
                            + "author=a&"
                            + "title=animal&"
                            + "subject=&"
                            + "lang=&"
                            + "category=&"
                            + "locc=&"
                            + "filetype=&"
                            + "submit_search=Search"
                            + "pageno=" + i);
                    //webClient.waitForBackgroundJavaScript(3000);
                    // tabloyu al
                    HtmlTable tempTable = (HtmlTable) tempPage.getByXPath("/html/body/div[1]/div[2]/table").get(0);

                    // tablodaki tüm rowlardan veriyi çekiyoruz
                    for (int j = 1; j < tempTable.getRowCount(); j++) {
                        // add etext-no
                        tableContents.add(Integer.parseInt(tempTable.getRow(j).getCell(0).getTextContent()));

                        // add author
                        tableContents.add(tempTable.getRow(j).getCell(2).getTextContent());

                        // add title
                        tableContents.add(tempTable.getRow(j).getCell(3).getTextContent());

                        //add language
                        tableContents.add(tempTable.getRow(j).getCell(4).getTextContent());
                    }
                }
            }

            return tableContents;
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton kitapAraButton;
    private javax.swing.JTextField kitapAraTextField;
    private javax.swing.JComboBox<String> kitapAramaComboBox;
    // End of variables declaration//GEN-END:variables
}
